name: 🌸 Lotus Main CI

# Allow multiple workflows to run in parallel
# Each workflow will be identified by its unique run ID
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.run_id }}
  cancel-in-progress: true

on:
  push:
    branches: [ main, master, develop, windowsMiner ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

# Global defaults for all jobs
defaults:
  run:
    shell: bash

jobs:
  # Check the current version first
  version-management:
    name: 📊 Version Management
    uses: ./.github/workflows/lotus-version-management.yml
    secrets: inherit

  # Define version name with branch
  set-version:
    name: 📋 Set Version Name
    needs: [ version-management ]
    runs-on: ubuntu-latest
    outputs:
      full_version: ${{ steps.set-version.outputs.full_version }}
    steps:
      - name: Set full version name
        id: set-version
        run: |
          BASE_VERSION="${{ needs.version-management.outputs.version }}"
          BRANCH="${{ github.ref_name }}"
          
          if [[ "$BRANCH" == "master" || "$BRANCH" == "main" ]]; then
            FULL_VERSION="$BASE_VERSION"
          else
            FULL_VERSION="$BASE_VERSION-$BRANCH"
          fi
          
          echo "full_version=$FULL_VERSION" >> $GITHUB_OUTPUT
          echo "Full version: $FULL_VERSION"

  # Build all components in parallel (no skipping based on branch)
  build-core:
    name: 🏗️ Core Components
    needs: [ version-management, set-version ]
    if: always()
    uses: ./.github/workflows/lotus-core-build.yml
    with:
      version: ${{ needs.set-version.outputs.full_version }}
    secrets: inherit

  build-tools:
    name: 🔧 Tool Components
    needs: [ version-management, set-version ]
    if: always()
    uses: ./.github/workflows/lotus-tools-build.yml
    with:
      version: ${{ needs.set-version.outputs.full_version }}
    secrets: inherit

  build-gui:
    name: 🖥️ GUI Components
    needs: [ version-management, set-version ]
    if: always()
    uses: ./.github/workflows/lotus-gui-build.yml
    with:
      version: ${{ needs.set-version.outputs.full_version }}
    secrets: inherit

  build-miner:
    name: ⛏️ Mining Components
    needs: [ version-management, set-version ]
    if: always()
    uses: ./.github/workflows/lotus-miner-build.yml
    with:
      version: ${{ needs.set-version.outputs.full_version }}
    secrets: inherit

  # Revert version if any builds failed
  revert-version:
    name: ⏮️ Revert Version
    needs: [ version-management, set-version, build-core, build-tools, build-gui, build-miner ]
    if: always() && (github.ref_name == 'master' || github.ref_name == 'main') && needs.version-management.outputs.version_bumped == 'true' && (needs.build-core.result == 'failure' || needs.build-tools.result == 'failure' || needs.build-gui.result == 'failure' || needs.build-miner.result == 'failure')
    uses: ./.github/workflows/lotus-version-revert.yml
    with:
      current_version: ${{ needs.version-management.outputs.version }}
      prev_version: ${{ needs.version-management.outputs.prev_version }}
      build_failures: ${{ needs.build-core.result == 'failure' || needs.build-tools.result == 'failure' || needs.build-gui.result == 'failure' || needs.build-miner.result == 'failure' }}
    secrets: inherit

  # Release process (only happens on master/main)
  release:
    name: 🚀 Release
    needs: [ version-management, set-version, build-core, build-tools, build-gui, build-miner, revert-version ]
    if: always() && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main') && github.event_name == 'push' && needs.build-core.result == 'success' && needs.build-tools.result == 'success' && needs.build-gui.result == 'success' && needs.build-miner.result == 'success' && (needs.revert-version.result == 'skipped' || needs.revert-version.result == 'success')
    uses: ./.github/workflows/lotus-release.yml
    with:
      version: ${{ needs.set-version.outputs.full_version }}
    secrets: inherit

# Add permissions at the top level
permissions:
  contents: write
  packages: write
