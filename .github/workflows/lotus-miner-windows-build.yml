name: ⛏️ Lotus Miner Windows Build

on:
  workflow_call:
    inputs:
      version:
        description: "The version to build"
        required: true
        type: string
    outputs:
      build_status:
        description: "The status of the build"
        value: ${{ jobs.build-lotus-gpu-miner-windows.outputs.build_status }}

jobs:
  build-lotus-gpu-miner-windows:
    name: 🪟 Build Windows lotus-gpu-miner
    runs-on: windows-latest
    outputs:
      build_status: ${{ job.status }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref_name }}

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        components: rustfmt, clippy

    # Install OpenCL SDK for Windows
    - name: Download OpenCL SDK
      shell: pwsh
      run: |
        echo "Downloading OpenCL SDK..."
        Invoke-WebRequest -Uri "https://github.com/KhronosGroup/OpenCL-SDK/releases/download/v2023.04.17/OpenCL-SDK-v2023.04.17-Win-x64.zip" -OutFile "opencl-sdk.zip"
        
        echo "Extracting OpenCL SDK..."
        Expand-Archive -Path "opencl-sdk.zip" -DestinationPath "C:\opencl-sdk"
        
        echo "Listing OpenCL SDK contents..."
        Get-ChildItem -Path "C:\opencl-sdk" -Recurse | Where-Object { $_.Name -match "\.lib$" } | Format-Table FullName

    - name: Setup OpenCL environment
      shell: pwsh
      run: |
        echo "Setting up OpenCL environment variables..."
        
        # Find OpenCL.lib
        $openclLib = Get-ChildItem -Path "C:\opencl-sdk" -Recurse -Filter "OpenCL.lib" | Select-Object -First 1
        if ($openclLib) {
            echo "Found OpenCL.lib at: $($openclLib.FullName)"
            $openclLibDir = $openclLib.Directory.FullName
            echo "OpenCL library directory: $openclLibDir"
            
            # Add to environment variables for the job
            echo "OPENCL_LIB_DIR=$openclLibDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            
            # Also create system-wide environment variable
            [System.Environment]::SetEnvironmentVariable("OPENCL_LIB_DIR", $openclLibDir, [System.EnvironmentVariableTarget]::Process)
            
            # Add to PATH
            echo "$openclLibDir" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        } else {
            echo "ERROR: Could not find OpenCL.lib in C:\opencl-sdk"
            exit 1
        }
        
        # Find OpenCL include directory
        $openclInclude = Get-ChildItem -Path "C:\opencl-sdk" -Recurse -Filter "CL" -Directory | 
                         Where-Object { Test-Path (Join-Path $_.FullName "opencl.h") } | 
                         Select-Object -First 1
        
        if ($openclInclude) {
            $openclIncludeDir = $openclInclude.Parent.FullName
            echo "Found OpenCL include directory: $openclIncludeDir"
            echo "OPENCL_INCLUDE_DIR=$openclIncludeDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            [System.Environment]::SetEnvironmentVariable("OPENCL_INCLUDE_DIR", $openclIncludeDir, [System.EnvironmentVariableTarget]::Process)
        } else {
            echo "WARNING: Could not find OpenCL include directory"
        }

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: "gpuminer -> target"

    - name: Create artifacts directory
      shell: pwsh
      run: |
        New-Item -ItemType Directory -Force -Path ./artifacts
        New-Item -ItemType Directory -Force -Path ./debug-info

    - name: Build Windows miner
      shell: pwsh
      run: |
        echo "Starting Windows GPU miner build..."
        
        # Debug information
        echo "Current directory: $(Get-Location)"
        echo "Branch name: $env:GITHUB_REF_NAME"
        echo "OpenCL lib directory: $env:OPENCL_LIB_DIR"
        
        # Check if gpuminer directory exists
        if (Test-Path -Path "gpuminer") {
            echo "gpuminer directory found"
        } else {
            echo "ERROR: gpuminer directory not found. Directory contents:"
            Get-ChildItem -Path .
            exit 1
        }
        
        # Navigate to the gpuminer directory
        cd gpuminer
        
        # Show Cargo.toml contents for debugging
        echo "Cargo.toml contents:"
        if (Test-Path -Path "Cargo.toml") {
            Get-Content -Path "Cargo.toml"
        } else {
            echo "ERROR: Cargo.toml not found!"
            exit 1
        }
        
        # Set OPENCL_SDK_ROOT environment variable
        $env:OPENCL_SDK_ROOT = "C:\opencl-sdk"
        
        # Update the libraries environment to include OpenCL libs
        if (Test-Path -Path "$env:OPENCL_LIB_DIR") {
            echo "Setting RUSTFLAGS with OpenCL library path"
            $env:RUSTFLAGS = "-L native=$env:OPENCL_LIB_DIR"
        } else {
            echo "WARNING: OPENCL_LIB_DIR not set or directory not found"
        }
        
        # Build the miner in release mode with verbose output
        echo "Running cargo build..."
        cargo build --release --package lotus-miner-cli -v
        
        if ($LASTEXITCODE -ne 0) {
          echo "ERROR: Cargo build failed!"
          exit 1
        }
        
        # Verify target directory exists
        if (Test-Path -Path "target/release") {
            echo "Release build directory exists"
        } else {
            echo "ERROR: Release build directory not found!"
            exit 1
        }
        
        # Copy the binary to artifacts directory
        cp -v target/release/lotus-miner-cli.exe ../artifacts/
        
        # Create a copy with alternative name
        cp -v ../artifacts/lotus-miner-cli.exe ../artifacts/lotus-gpu-miner.exe
        
        # Copy kernels directory (important for GPU operation)
        cp -r kernels ../artifacts/
        
        # Verify files exist
        echo "Contents of artifacts directory:"
        Get-ChildItem -Path ../artifacts/ -Force
        
        # Save file metadata
        echo "Build completed. Writing debug information..."
        Get-ChildItem -Path ../artifacts/ > ../debug-info/artifacts-list.txt
        Get-ChildItem -Recurse ../artifacts | Select-Object FullName, Length | Format-Table -AutoSize > ../debug-info/detailed-artifacts.txt
        
        # Capture Rust version info
        rustc --version > ../debug-info/rust-version-info.txt
        cargo --version >> ../debug-info/rust-version-info.txt
        
        echo "Windows build completed successfully."

    # Upload Windows GPU miner binary artifacts with kernels
    - name: Upload Windows GPU miner artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lotus-gpu-miner-windows-${{ inputs.version }}
        path: |
          ./artifacts/*.exe
          ./artifacts/kernels/
        retention-days: 14
    
    # Upload debug info
    - name: Upload debug info
      uses: actions/upload-artifact@v4
      with:
        name: lotus-gpu-miner-windows-debug-${{ inputs.version }}
        path: ./debug-info/
        retention-days: 3
        
